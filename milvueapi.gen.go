// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package goclient

import (
	"encoding/json"
	"errors"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	APIKeyHeaderScopes = "APIKeyHeader.Scopes"
)

// Defines values for InferenceCommandEnum.
const (
	Smarturgences InferenceCommandEnum = "smarturgences"
	Smartxpert    InferenceCommandEnum = "smartxpert"
)

// Defines values for InferenceStatusEnum.
const (
	InferenceStatusEnumDone        InferenceStatusEnum = "done"
	InferenceStatusEnumEmpty       InferenceStatusEnum = "empty"
	InferenceStatusEnumForbidden   InferenceStatusEnum = "forbidden"
	InferenceStatusEnumNotFound    InferenceStatusEnum = "not_found"
	InferenceStatusEnumRunning     InferenceStatusEnum = "running"
	InferenceStatusEnumServerError InferenceStatusEnum = "server_error"
)

// Defines values for LanguageEnum.
const (
	De LanguageEnum = "de"
	En LanguageEnum = "en"
	Es LanguageEnum = "es"
	Fr LanguageEnum = "fr"
	It LanguageEnum = "it"
	Pt LanguageEnum = "pt"
)

// Defines values for MeasureTypeEnum.
const (
	Angle  MeasureTypeEnum = "angle"
	Length MeasureTypeEnum = "length"
)

// Defines values for OutputFormatEnum.
const (
	Gsps    OutputFormatEnum = "gsps"
	Highbit OutputFormatEnum = "highbit"
	Overlay OutputFormatEnum = "overlay"
)

// Defines values for OutputSelectionEnum.
const (
	OutputSelectionEnumAll         OutputSelectionEnum = "all"
	OutputSelectionEnumNoNegatives OutputSelectionEnum = "no_negatives"
	OutputSelectionEnumNoRecap     OutputSelectionEnum = "no_recap"
	OutputSelectionEnumNone        OutputSelectionEnum = "none"
)

// Defines values for PathoLabelEnum.
const (
	PathoLabelEnumAbnormal PathoLabelEnum = "abnormal"
	PathoLabelEnumDoubt    PathoLabelEnum = "doubt"
	PathoLabelEnumNormal   PathoLabelEnum = "normal"
	PathoLabelEnumOutScope PathoLabelEnum = "out_scope"
	PathoLabelEnumUnknown  PathoLabelEnum = "unknown"
)

// Defines values for PathoStatusEnum.
const (
	PathoStatusEnumDoubt    PathoStatusEnum = "doubt"
	PathoStatusEnumNo       PathoStatusEnum = "no"
	PathoStatusEnumOutScope PathoStatusEnum = "out_scope"
	PathoStatusEnumUnknown  PathoStatusEnum = "unknown"
	PathoStatusEnumYes      PathoStatusEnum = "yes"
)

// Defines values for RecapThemeEnum.
const (
	Dark  RecapThemeEnum = "dark"
	Light RecapThemeEnum = "light"
)

// Defines values for ResponseV3Status.
const (
	ResponseV3StatusForbidden   ResponseV3Status = "forbidden"
	ResponseV3StatusRunning     ResponseV3Status = "running"
	ResponseV3StatusServerError ResponseV3Status = "server_error"
)

// Defines values for SmarturgencesV3Status.
const (
	SmarturgencesV3StatusDone SmarturgencesV3Status = "done"
)

// Defines values for SmartxpertV3Status.
const (
	SmartxpertV3StatusDone SmartxpertV3Status = "done"
)

// Defines values for StaticReportEnum.
const (
	StaticReportEnumNone StaticReportEnum = "none"
	StaticReportEnumPdf  StaticReportEnum = "pdf"
	StaticReportEnumRgb  StaticReportEnum = "rgb"
)

// Defines values for StructuredReportEnum.
const (
	Full   StructuredReportEnum = "full"
	Lite   StructuredReportEnum = "lite"
	None   StructuredReportEnum = "none"
	Normal StructuredReportEnum = "normal"
)

// BaseResponseV3 defines model for BaseResponseV3.
type GetResponse struct {
	// StudyInstanceUID The `StudyInstanceUID (0020,000D)` attribute of the study
	StudyInstanceUID string `json:"StudyInstanceUID"`

	// Message Optional message
	Message *string `json:"message,omitempty"`

	// Status Current status of the study
	Status InferenceStatusEnum `json:"status"`

	// Version Milvue Suite's version
	Version string `json:"version"`

	SignedUrls []string `json:"signed_urls,omitempty"`
}

// BodyPartSchema defines model for BodyPartSchema.
type BodyPartSchema struct {
	// Score Prediction score, between 0 and 1
	Score       float32                                    `json:"score"`
	Translation IntegratorSchemasExternalTranslationSchema `json:"translation"`

	// Value Predicted body part
	Value string `json:"value"`
}

// BoundingBoxSchema defines model for BoundingBoxSchema.
type BoundingBoxSchema struct {
	// BottomRight The bottom right corner of the box: `[x, y]`
	BottomRight []int `json:"bottom_right"`

	// Label Prediction interpretation
	Label PathoLabelEnum `json:"label"`

	// Score Prediction score, between 0 and 1
	Score float32 `json:"score"`

	// TopLeft The top left corner of the box: `[x, y]`
	TopLeft     []int                                      `json:"top_left"`
	Translation IntegratorSchemasExternalTranslationSchema `json:"translation"`

	// Value Predicted value
	Value string `json:"value"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Example *string `json:"example,omitempty"`
	Message string  `json:"message"`
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// InferenceCommandEnum An enumeration.
type InferenceCommandEnum string

// InferenceStatusEnum An enumeration.
type InferenceStatusEnum string

// LanguageEnum An enumeration.
type LanguageEnum string

// MeasureSchema defines model for MeasureSchema.
type MeasureSchema struct {
	// Lines
	// A list of lines, each line being a pair of points: `[x1, y1, x2, y2]`
	//
	// Measures of type `angle` contain two lines, forming the two rays
	//
	// Measures of type `length` contain one line, forming the measured segment
	Lines [][]int `json:"lines"`

	// Measure Predicted measure
	Measure     float32                                    `json:"measure"`
	Translation IntegratorSchemasExternalTranslationSchema `json:"translation"`
	Type        MeasureTypeEnum                            `json:"type"`

	// Unit Measure unit (e.g., `mm`, `deg`)
	Unit string `json:"unit"`

	// Value Predicted value
	Value string `json:"value"`
}

// MeasureTypeEnum An enumeration.
type MeasureTypeEnum string

// OutputFormatEnum An enumeration.
type OutputFormatEnum string

// OutputSelectionEnum An enumeration.
type OutputSelectionEnum string

// PathoLabelEnum An enumeration.
type PathoLabelEnum string

// PathoStatusEnum An enumeration.
type PathoStatusEnum string

// PostDicomWebResponseV3 defines model for PostDicomWebResponseV3.
type PostDicomWebResponseV3 struct {
	// StudyInstanceUID The `StudyInstanceUID (0020,000D)` attribute of the study
	StudyInstanceUID string  `json:"StudyInstanceUID"`
	Message          string  `json:"message"`
	RetrieveUrl      *string `json:"retrieve_url,omitempty"`
}

// PostSignedUrlResponse defines model for PostSignedUrlResponse.
type PostSignedUrlResponse struct {
	// StudyInstanceUID The `StudyInstanceUID (0020,000D)` attribute of the study
	StudyInstanceUID string            `json:"StudyInstanceUID"`
	SignedUrls       map[string]string `json:"signed_urls"`
}

// RecapThemeEnum An enumeration.
type RecapThemeEnum string

// ReportSchema defines model for ReportSchema.
type ReportSchema struct {
	Results    []ResultSchema `json:"results"`
	Techniques []string       `json:"techniques"`
	Title      string         `json:"title"`
}

// ResponseSmarturgencesV3 defines model for ResponseSmarturgencesV3.
type ResponseSmarturgencesV3 struct {
	union json.RawMessage
}

// ResponseSmartxpertV3 defines model for ResponseSmartxpertV3.
type ResponseSmartxpertV3 struct {
	union json.RawMessage
}

// ResponseV3 defines model for ResponseV3.
type ResponseV3 struct {
	// StudyInstanceUID The `StudyInstanceUID (0020,000D)` attribute of the study
	StudyInstanceUID string `json:"StudyInstanceUID"`

	// Message Optional message
	Message *string          `json:"message,omitempty"`
	Status  ResponseV3Status `json:"status"`

	// Version Milvue Suite's version
	Version string `json:"version"`
}

// ResponseV3Status defines model for ResponseV3.Status.
type ResponseV3Status string

// ResultSchema defines model for ResultSchema.
type ResultSchema struct {
	Items  []string `json:"items"`
	Region string   `json:"region"`
}

// SmarturgencesInstanceSchema defines model for SmarturgencesInstanceSchema.
type SmarturgencesInstanceSchema struct {
	// SOPInstanceUID The `SOPInstanceUID (0008,0018)` attribute of the dicom instance
	SOPInstanceUID string `json:"SOPInstanceUID"`

	// SeriesInstanceUID The `SeriesInstanceUID (0020,000E)` attribute of the series
	SeriesInstanceUID string                                   `json:"SeriesInstanceUID"`
	BodyParts         []BodyPartSchema                         `json:"body_parts"`
	BoundingBoxes     []BoundingBoxSchema                      `json:"bounding_boxes"`
	Findings          []IntegratorSchemasExternalFindingSchema `json:"findings"`
}

// SmarturgencesV3 defines model for SmarturgencesV3.
type SmarturgencesV3 struct {
	// StudyInstanceUID The `StudyInstanceUID (0020,000D)` attribute of the study
	StudyInstanceUID string `json:"StudyInstanceUID"`

	// Findings List of study level findings
	Findings []IntegratorSchemasExternalFindingSchema `json:"findings"`

	// Flag Study level flag, providing SmartUrgences overall result
	Flag IntegratorSchemasExternalFlagSchema `json:"flag"`

	// Hl7 HL7 message describing the study level results
	Hl7 string `json:"hl7"`

	// Instances Detailed results for each instance
	Instances []SmarturgencesInstanceSchema `json:"instances"`

	// Message Optional message
	Message *string       `json:"message,omitempty"`
	Report  *ReportSchema `json:"report,omitempty"`

	// SignedUrl Signed url to download study recapitulative dicom
	SignedUrl *string               `json:"signed_url,omitempty"`
	Status    SmarturgencesV3Status `json:"status"`

	// Version Milvue Suite's version
	Version string `json:"version"`
}

// SmarturgencesV3Status defines model for SmarturgencesV3.Status.
type SmarturgencesV3Status string

// SmartxpertInstanceSchema defines model for SmartxpertInstanceSchema.
type SmartxpertInstanceSchema struct {
	// SOPInstanceUID The `SOPInstanceUID (0008,0018)` attribute of the dicom instance
	SOPInstanceUID string `json:"SOPInstanceUID"`

	// SeriesInstanceUID The `SeriesInstanceUID (0020,000E)` attribute of the series
	SeriesInstanceUID string           `json:"SeriesInstanceUID"`
	BodyParts         []BodyPartSchema `json:"body_parts"`

	// Measures A list of measures, e.g., length or angle.
	Measures []MeasureSchema `json:"measures"`
}

// SmartxpertV3 defines model for SmartxpertV3.
type SmartxpertV3 struct {
	// StudyInstanceUID The `StudyInstanceUID (0020,000D)` attribute of the study
	StudyInstanceUID string `json:"StudyInstanceUID"`

	// Instances Detailed results for each instance
	Instances []SmartxpertInstanceSchema `json:"instances"`

	// Message Optional message
	Message *string            `json:"message,omitempty"`
	Status  SmartxpertV3Status `json:"status"`

	// Version Milvue Suite's version
	Version string `json:"version"`
}

// SmartxpertV3Status defines model for SmartxpertV3.Status.
type SmartxpertV3Status string

// StaticReportEnum An enumeration.
type StaticReportEnum string

// StructuredReportEnum An enumeration.
type StructuredReportEnum string

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationError_Loc_Item `json:"loc"`
	Msg  string                     `json:"msg"`
	Type string                     `json:"type"`
}

// ValidationErrorLoc0 defines model for .
type ValidationErrorLoc0 = string

// ValidationErrorLoc1 defines model for .
type ValidationErrorLoc1 = int

// ValidationError_Loc_Item defines model for ValidationError.loc.Item.
type ValidationError_Loc_Item struct {
	union json.RawMessage
}

// IntegratorSchemasExternalFindingSchema defines model for integrator__schemas__external__FindingSchema.
type IntegratorSchemasExternalFindingSchema struct {
	// Label Prediction interpretation
	Label PathoLabelEnum `json:"label"`

	// Score Prediction score, between 0 and 1
	Score       float32                                    `json:"score"`
	Translation IntegratorSchemasExternalTranslationSchema `json:"translation"`

	// Type Deprecated: use `label` instead
	Type *PathoStatusEnum `json:"type,omitempty"`

	// Value Predicted value
	Value string `json:"value"`
}

// IntegratorSchemasExternalFlagSchema defines model for integrator__schemas__external__FlagSchema.
type IntegratorSchemasExternalFlagSchema struct {
	// Label Prediction interpretation
	Label PathoLabelEnum `json:"label"`

	// Score Prediction score, between 0 and 1
	Score float32 `json:"score"`
}

// IntegratorSchemasExternalTranslationSchema defines model for integrator__schemas__external__TranslationSchema.
type IntegratorSchemasExternalTranslationSchema struct {
	De string `json:"de"`
	En string `json:"en"`
	Es string `json:"es"`
	Fr string `json:"fr"`
	It string `json:"it"`
	Pt string `json:"pt"`
}

// GetSmarturgencesV3SmarturgencesStudyInstanceUidGetParams defines parameters for GetSmarturgencesV3SmarturgencesStudyInstanceUidGet.
type GetSmarturgencesV3SmarturgencesStudyInstanceUidGetParams struct {
	Language *string `form:"language,omitempty" json:"language,omitempty"`
}

// PostMultipartV3V3StudiesPostParams defines parameters for PostMultipartV3V3StudiesPost.
type PostMultipartV3V3StudiesPostParams struct {
	SignedUrl      *bool   `form:"signed_url,omitempty" json:"signed_url,omitempty"`
	OrganizationId *string `form:"organizationId,omitempty" json:"organizationId,omitempty"`
	SiteId         *string `form:"siteId,omitempty" json:"siteId,omitempty"`
	AnalysisId     *string `form:"analysisId,omitempty" json:"analysisId,omitempty"`
	Accept         *string `json:"accept,omitempty"`
}

// GetMultipartV3StudiesStudyInstanceUidGetParams defines parameters for GetMultipartV3StudiesStudyInstanceUidGet.
type GetMultipartV3StudiesStudyInstanceUidGetParams struct {
	SignedUrl              *bool                 `form:"signed_url,omitempty" json:"signed_url,omitempty"`
	OutputFormat           *OutputFormatEnum     `form:"output_format,omitempty" json:"output_format,omitempty"`
	Language               *LanguageEnum         `form:"language,omitempty" json:"language,omitempty"`
	InferenceCommand       InferenceCommandEnum  `form:"inference_command" json:"inference_command"`
	Timezone               *float32              `form:"timezone,omitempty" json:"timezone,omitempty"`
	OutputSelection        *OutputSelectionEnum  `form:"output_selection,omitempty" json:"output_selection,omitempty"`
	RecapTheme             *RecapThemeEnum       `form:"recap_theme,omitempty" json:"recap_theme,omitempty"`
	StructuredReportFormat *StructuredReportEnum `form:"structured_report_format,omitempty" json:"structured_report_format,omitempty"`
	StaticReportFormat     *StaticReportEnum     `form:"static_report_format,omitempty" json:"static_report_format,omitempty"`
	Accept                 *string               `json:"accept,omitempty"`
}

// AsSmarturgencesV3 returns the union data inside the ResponseSmarturgencesV3 as a SmarturgencesV3
func (t ResponseSmarturgencesV3) AsSmarturgencesV3() (SmarturgencesV3, error) {
	var body SmarturgencesV3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSmarturgencesV3 overwrites any union data inside the ResponseSmarturgencesV3 as the provided SmarturgencesV3
func (t *ResponseSmarturgencesV3) FromSmarturgencesV3(v SmarturgencesV3) error {
	v.Status = "done"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSmarturgencesV3 performs a merge with any union data inside the ResponseSmarturgencesV3, using the provided SmarturgencesV3
func (t *ResponseSmarturgencesV3) MergeSmarturgencesV3(v SmarturgencesV3) error {
	v.Status = "done"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsResponseV3 returns the union data inside the ResponseSmarturgencesV3 as a ResponseV3
func (t ResponseSmarturgencesV3) AsResponseV3() (ResponseV3, error) {
	var body ResponseV3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResponseV3 overwrites any union data inside the ResponseSmarturgencesV3 as the provided ResponseV3
func (t *ResponseSmarturgencesV3) FromResponseV3(v ResponseV3) error {
	v.Status = "forbidden"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResponseV3 performs a merge with any union data inside the ResponseSmarturgencesV3, using the provided ResponseV3
func (t *ResponseSmarturgencesV3) MergeResponseV3(v ResponseV3) error {
	v.Status = "forbidden"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ResponseSmarturgencesV3) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"status"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ResponseSmarturgencesV3) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "done":
		return t.AsSmarturgencesV3()
	case "forbidden":
		return t.AsResponseV3()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ResponseSmarturgencesV3) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResponseSmarturgencesV3) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSmartxpertV3 returns the union data inside the ResponseSmartxpertV3 as a SmartxpertV3
func (t ResponseSmartxpertV3) AsSmartxpertV3() (SmartxpertV3, error) {
	var body SmartxpertV3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSmartxpertV3 overwrites any union data inside the ResponseSmartxpertV3 as the provided SmartxpertV3
func (t *ResponseSmartxpertV3) FromSmartxpertV3(v SmartxpertV3) error {
	v.Status = "done"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSmartxpertV3 performs a merge with any union data inside the ResponseSmartxpertV3, using the provided SmartxpertV3
func (t *ResponseSmartxpertV3) MergeSmartxpertV3(v SmartxpertV3) error {
	v.Status = "done"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsResponseV3 returns the union data inside the ResponseSmartxpertV3 as a ResponseV3
func (t ResponseSmartxpertV3) AsResponseV3() (ResponseV3, error) {
	var body ResponseV3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResponseV3 overwrites any union data inside the ResponseSmartxpertV3 as the provided ResponseV3
func (t *ResponseSmartxpertV3) FromResponseV3(v ResponseV3) error {
	v.Status = "server_error"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResponseV3 performs a merge with any union data inside the ResponseSmartxpertV3, using the provided ResponseV3
func (t *ResponseSmartxpertV3) MergeResponseV3(v ResponseV3) error {
	v.Status = "server_error"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ResponseSmartxpertV3) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"status"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ResponseSmartxpertV3) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "done":
		return t.AsSmartxpertV3()
	case "server_error":
		return t.AsResponseV3()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ResponseSmartxpertV3) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResponseSmartxpertV3) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsValidationErrorLoc0 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc0
func (t ValidationError_Loc_Item) AsValidationErrorLoc0() (ValidationErrorLoc0, error) {
	var body ValidationErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc0 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) FromValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc0 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsValidationErrorLoc1 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc1
func (t ValidationError_Loc_Item) AsValidationErrorLoc1() (ValidationErrorLoc1, error) {
	var body ValidationErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc1 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) FromValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc1 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ValidationError_Loc_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Loc_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
